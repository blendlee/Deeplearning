# -*- coding: utf-8 -*-
"""3. Logit/Signoid/Softmax.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YOWzffXmj1OBUFBoxWkR-Z5tq6G4u1Ta
"""



"""#3-1 The Graphs of Odds, Logit and Sigmoid

##Code 3-1-1 The Graphs of Odds and Logit
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
plt.style.use('seaborn')

p_np = np.linspace(0.01,0.99, 100)
p_tf = tf.linspace(0.01,0.99,100)

odds_np = p_np/(1-p_np)
odds_tf = p_tf/(1-p_tf)

logit_np = np.log(odds_np)
logit_tf = tf.math.log(odds_tf)

fig, axes = plt.subplots(2,1,figsize=(15,10),
                         sharex=True)
axes[0].plot(p_np, odds_np)
axes[1].plot(p_np, logit_np)

xticks = np.arange(0,1.1,0.1)
axes[0].tick_params(labelsize=15)
axes[0].set_xticks(xticks)
axes[0].set_ylabel('Odds', fontsize=20,color= 'darkblue')
axes[1].tick_params(labelsize=15)
axes[1].set_xticks(xticks)
axes[1].set_ylabel('Logit', fontsize=20,color= 'darkblue')
axes[1].set_xlabel('Probability', fontsize=20,color= 'darkblue')

"""## Code 3-1-2 The Graphs of Sigmoid"""

import tensorflow as tf

from tensorflow.keras.layers import Activation
X = tf.linspace(-10,10,100)

sigmoid=Activation('sigmoid')(X)

fig, ax = plt.subplots(figsize=(10,5))

ax.plot(X.numpy(), sigmoid.numpy())

"""# 3-2 Logistic Regression Models

## Code 3-2-1 Single-variate Logistic Regression Models
"""

import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.keras.layers import Dense

plt.style.use('seaborn')

X=tf.random.normal(shape=(100,1))
dense = Dense(units=1, activation = 'sigmoid')

Y = dense(X)
print(Y.shape)
fig, ax = plt.subplots(figsize = (7,7))
ax.scatter(X.numpy().flatten(),Y.numpy().flatten())

"""## Code 3-2-2 Multi-variate Logistic Regression Models"""

import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.keras.layers import Dense

plt.style.use('seaborn')

X=tf.random.normal(shape=(100,5)) # >> y좌표는 multi variate을 의미
                                  # >> x좌표는 데이터 갯수를 의미
dense = Dense(units=1, activation = 'sigmoid')

Y = dense(X)
print(Y.shape)
fig, ax = plt.subplots(figsize = (7,7))
ax.scatter(X.numpy().flatten(),Y.numpy().flatten())

"""# 3-3 Binary Classifier with Dense Layers

## 3-3-1 Binary Classifier with Dense Layers
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model= Sequential()
model.add(Dense(units=10, activation='relu'))
model.add(Dense(units=5, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

# 간략한 layer 전개도

"""# 3-4 Softmax Layers

## Code 3-4-1 IO of Softmax
"""

import tensorflow as tf

from tensorflow.keras.layers import Activation

logit=tf.random.uniform(shape=(2,5), minval=-10 , maxval=10)
print(logit)

softmax_value = Activation('softmax')(logit)
softmax_sum = tf.reduce_sum(softmax_value, axis=1)

print('logits : \n', logit.numpy())
print("probabilities : \n" , softmax_value.numpy())
print("sum of softmax values : \n", softmax_sum)

"""## Code 3-4-2 Softmax in Dense Layers"""

import tensorflow as tf

from tensorflow.keras.layers import Dense

logit=tf.random.uniform(shape=(2,5), minval=-10 , maxval=10)
dense = Dense(units=2, activation='softmax')

Y=dense(logit)
print(tf.reduce_sum(Y,axis=1))

"""#3-5 Multi-class Classifiers

## Code 3-5-1 Multi-class Classifiers
"""

import tensorflow as tf


from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense

class TestModel(Model):
  def __init__(self):
    super(TestModel,self).__init__()

    self.dens1 =Dense(units=5,activation='relu')
    self.dens2 =Dense(units=11,activation='relu')
    self.dens3 =Dense(units=3,activation='softmax')
  
  def call(self,x):
    print("X : {}\n {}\n". format(x.shape,x.numpy()))

    x= self.dens1(x)
    print("X : {}\n {}\n". format(x.shape,x.numpy()))

    x= self.dens2(x)
    print("X : {}\n {}\n". format(x.shape,x.numpy()))

    x= self.dens3(x)
    print("X : {}\n {}\n". format(x.shape,x.numpy()))
    print('sum of vectors: {}\n' .format(tf.reduce_sum(x,axis=1)))
    return x

model = TestModel()

X=tf.random.uniform(shape=(8,5) , minval=-10,maxval=10)
Y=model(X)

